"
" -- VIM configuration --
"

" Vundle setup

filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#rc()

" Manage Vundle with Vundle
Plugin'VundleVim/Vundle.vim'

" Plugins
Plugin 'sheerun/vim-polyglot'
Plugin 'ervandew/supertab'
Plugin 'mileszs/ack.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'godlygeek/tabular'
Plugin 'vim-airline/vim-airline'
Plugin 'saltstack/salt-vim'
Plugin 'fatih/vim-go'
Plugin 'vim-scripts/SyntaxRange'
Plugin 'vim-scripts/bats.vim'
Plugin 'majutsushi/tagbar'
Plugin 'mattn/calendar-vim'
Plugin 'junegunn/goyo.vim'
Plugin 'bogado/file-line'
Plugin 'easymotion/vim-easymotion'
Plugin 'stephpy/vim-yaml'
Plugin 'solarnz/arcanist.vim'
Plugin 'gabrielelana/vim-markdown'
Plugin 'tpope/vim-rhubarb'

" Color schemas
Plugin 'brafales/vim-desert256'
Plugin 'vim-scripts/wombat256.vim'
Plugin 'morhetz/gruvbox'

syntax on
filetype plugin on
filetype plugin indent on

" Color scheme
set t_Co=256
set background=dark
set termguicolors

colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'

set number
set nocompatible
set modeline
set backspace=2
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set showcmd
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
set autoindent
set title
set laststatus=2
set backspace=indent,eol,start

set encoding=utf8
set spelllang=en,pl

set backupdir=~/.vim/backups
set backup

" Filetype settings
autocmd FileType markdown setlocal spell
autocmd FileType markdown setlocal textwidth=78

autocmd FileType rst setlocal spell
autocmd FileType rst setlocal textwidth=78

autocmd FileType txt setlocal spell
autocmd FileType txt setlocal textwidth=78

autocmd FileType tex setlocal spell
autocmd FileType tex setlocal textwidth=78

autocmd FileType adoc setlocal spell
autocmd FileType adoc setlocal textwidth=78

autocmd FileType yaml setlocal tabstop=2
autocmd FileType yaml setlocal shiftwidth=2
autocmd FileType yaml setlocal softtabstop=2

autocmd FileType gitcommit setlocal spell
autocmd FileType gitcommit setlocal textwidth=78

autocmd FileType mail setlocal spell
autocmd FileType mail setlocal textwidth=78
autocmd FileType mail setlocal nonumber

autocmd FileType go nmap <Leader>gd <Plug>(go-doc)
autocmd FileType go nmap <Leader>gb <Plug>(go-doc-browser)
autocmd FileType go nmap <Leader>i <Plug>(go-info)

autocmd FileType puppet setlocal isk+=:
autocmd FileType puppet nnoremap <c-]> :exe "tag " . substitute(expand("<cword>"), "^::", "", "")<CR>
autocmd FileType puppet nnoremap <c-w><c-]> :tab split<CR>:exe "tag " . substitute(expand("<cword>"), "^::", "", "")<CR>

" Jump to the last position when  reopening a file
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Mappings
map <C-J> :bnext<CR>
map <C-K> :bprev<CR>
map <C-L> :tabn<CR>
map <C-H> :tabp<CR>

vmap <Leader>y "+y
vmap <Leader>d "+d
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader>p "+p
nmap <Leader>P "+P

nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" Plugins configuration

" scrooloose/nerdcommenter
nmap <leader>t :NERDTreeToggle<CR>
let NERDTreeKeepTreeInNewTab=1

" vim-airline/vim-airline
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.readonly = 'RO'
let g:airline_symbols.crypt = 'CRYPT'
let g:airline_symbols.linenr = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.whitespace = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 1

" kien/ctrlp.vim
let g:ctrlp_extensions = ['tag']

" fatih/vim-go
let g:go_fmt_command = "goimports"

" mileszs/ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'

" majutsushi/tagbar
let g:tagbar_type_puppet = {
	\ 'ctagstype': 'puppet',
	\ 'kinds': [
		\'c:class',
		\'s:site',
		\'n:node',
		\'d:definition',
		\'r:resource',
		\'f:default'
	\]
\}

" SirVer/ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

let g:vim_markdown_folding_disabled = 1
